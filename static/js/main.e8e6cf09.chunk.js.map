{"version":3,"sources":["redux/contacts/contacts-actions.js","styles/AppBar.module.css","styles/UserMenu.module.css","styles/ContactsView.module.css","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js","redux/contacts/contacts-reducer.js","redux/store.js","components/routes.js","components/Navigation.js","components/UserMenu/UserMenu.js","components/AuthNav.js","components/AppBar.js","components/Container/Container.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","module","exports","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","authActions","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","name","email","user","createReducer","_","payload","token","setError","error","isAuthenticated","combineReducers","axios","defaults","baseURL","headers","common","Authorization","authOperations","register","credentials","dispatch","a","post","response","data","message","logOut","logIn","getCurrentUser","getState","persistedToken","auth","get","authSelectors","getIsAuthenticated","state","getUsermail","items","map","contact","includes","alert","filter","id","loading","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contacts","contactsReducer","reduxStore","persistor","persistStore","routes","HomeView","RegisterView","LoginView","ContactsView","connect","className","styles","link","activeClassName","activeLink","to","exact","mapDispatchToProps","onLogout","container","button","type","onClick","AuthNav","header","Container","children","Component","component","redirectTo","routeProps","render","props","restricted","lazy","NotFoundView","App","this","onGetCurrentUser","fallback","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8e6cf09.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n\r\nexport const filterContacts = createAction('contacts/Filter');\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppBar_header__2d_Fw\",\"link\":\"AppBar_link__3qJgm\",\"activeLink\":\"AppBar_activeLink__2PboY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UserMenu_container__1cTyc\",\"email\":\"UserMenu_email__368ZS\",\"button\":\"UserMenu_button__2gP0X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsView_container__1N_Xj\",\"title\":\"ContactsView_title__25GcZ\",\"form\":\"ContactsView_form__SdtTo\",\"form__label\":\"ContactsView_form__label__29NZR\",\"form__input\":\"ContactsView_form__input__33A__\",\"button\":\"ContactsView_button__2JTZj\",\"buttonDelete\":\"ContactsView_buttonDelete__1PZYU\",\"contacts\":\"ContactsView_contacts__WGNkc\",\"contacts__item\":\"ContactsView_contacts__item__2576B\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\n const authActions = {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n\r\nexport default authActions","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, {payload}) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_,  {payload} ) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError,\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\n/*\r\n * POST @ /users/signup\r\n * body { name, email, password }\r\n *\r\n * После успешной регистрации добавляем токен в HTTP-заголовок\r\n */\r\nconst register = credentials => async dispatch => {\r\n  dispatch(authActions.registerRequest())\r\n  \r\n  try {\r\n\r\n    const response = await axios.post('/users/signup', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.registerSuccess(response.data))\r\n  } catch (error) {\r\n\r\n    dispatch(authActions.registerError(error.message));\r\n  }\r\n}\r\n/*\r\n * POST @ /users/login\r\n * body:\r\n *    { email, password }\r\n *\r\n * После успешного логина добавляем токен в HTTP-заголовок\r\n */\r\nconst logIn = credentials => async dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n  \r\n  try {\r\n\r\n    const response = await axios.post('/users/login', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\n/*\r\n * POST @ /users/logout\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. После успешного логаута, удаляем токен из HTTP-заголовка\r\n */\r\nconst logOut = () => async dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n  \r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\n/*\r\n * GET @ /users/current\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. Забираем токен из стейта через getState()\r\n * 2. Если токена нет, выходим не выполняя никаких операций\r\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\r\n */\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\nconst authOperations = { register, logOut, logIn, getCurrentUser };\r\n\r\nexport default authOperations;","const getIsAuthenticated = state => state.auth.isAuthenticated\r\n\r\nconst getUsermail = state => state.auth.user.email;\r\n\r\n const authSelectors = {\r\n  getIsAuthenticated,\r\n  getUsermail,\r\n};\r\n\r\nexport default authSelectors;","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    filterContacts\r\n } from './contacts-actions'\r\n\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSuccess]: (state, { payload }) => payload,\r\n    \r\n    [addContactSuccess]: (state, { payload }) => state.map(contact => contact.name).includes(payload.name)\r\n    ? alert(`${payload.name} is already in contacts.`)\r\n    : [payload, ...state],\r\n  \r\n    \r\n    [deleteContactSuccess]: (state, { payload }) => state.filter(contact => contact.id !== payload),\r\n})\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [filterContacts]: (state, { payload }) => payload,\r\n})\r\n\r\nconst error = createReducer(null, {})\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n    error,\r\n})","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\nimport { authReducer } from './auth';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n}),\r\n\r\n    logger\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),       \r\n    contacts: contactsReducer,\r\n  },\r\n    \r\n  middleware,\r\n});\r\n\r\nconst persistor = persistStore(store)\r\n\r\nconst reduxStore = { store, persistor };\r\n\r\nexport default reduxStore","const routes =  {\r\n    HomeView: '/',\r\n    RegisterView: '/register',\r\n    LoginView: '/login',\r\n    ContactsView: '/contacts'\r\n}\r\n\r\nexport default routes","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport routes from './routes'\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\nimport styles from '../styles/AppBar.module.css';\r\n\r\n\r\n\r\nconst Navigation = ({ isAuthenticated }) => (\r\n  <nav>\r\n    <NavLink \r\n      className={styles.link} \r\n      activeClassName={styles.activeLink} \r\n      to={routes.HomeView}\r\n      exact>\r\n      Home\r\n    </NavLink>\r\n\r\n    {isAuthenticated && (\r\n      <NavLink\r\n        className={styles.link} \r\n        activeClassName={styles.activeLink} \r\n        to={routes.ContactsView}\r\n        exact       \r\n      >\r\n        Contacts\r\n      </NavLink>\r\n    )}\r\n  </nav>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Navigation);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors, authOperations } from '../../redux/auth';\r\nimport styles from '../../styles/UserMenu.module.css'\r\n\r\n\r\nconst UserMenu = ({ email, onLogout }) => (\r\n    <div className={styles.container}>\r\n        <p className={styles.email}>{email}</p>\r\n        <button className={styles.button} type=\"button\" onClick={onLogout}>\r\n            Logout\r\n        </button>\r\n    </div>\r\n\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n    email: authSelectors.getUsermail(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    onLogout: authOperations.logOut,\r\n};\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n//zxc zxc@ukr.net\r\n//Andrii Mishenko andriiasd123@gmail.com Fylhtq2021\r\n//Anna Mishchenko anechka@gmail.com Fyz1990","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport routes from './routes';\r\nimport styles from '../styles/AppBar.module.css';\r\n\r\nconst AuthNav = () => (\r\n  <div>\r\n    <NavLink\r\n      className={styles.link} \r\n      activeClassName={styles.activeLink} \r\n      to={routes.RegisterView}\r\n      exact\r\n\r\n    >\r\n      Registration\r\n    </NavLink>\r\n    <NavLink\r\n      className={styles.link} \r\n      activeClassName={styles.activeLink} \r\n      to={routes.LoginView}\r\n      exact \r\n    >\r\n      Login\r\n    </NavLink>\r\n  </div>\r\n);\r\n\r\nexport default AuthNav;","import React from 'react';\r\n\r\nimport Navigation from './Navigation';\r\nimport styles from '../styles/AppBar.module.css';\r\nimport UserMenu from './UserMenu';\r\nimport AuthNav from './AuthNav';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\n\r\nconst AppBar = ({isAuthenticated}) => (\r\n    <header className={styles.header}>\r\n        <Navigation />\r\n        {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n    </header>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuthenticated: authSelectors.getIsAuthenticated(state)\r\n})\r\n \r\nexport default connect(mapStateToProps)(AppBar);","import React from 'react';\r\nimport styles from '../../styles/ContactsView.module.css';\r\n\r\nconst Container = ({ children }) => <div className={styles.container}>{children}</div>;\r\n\r\nexport default Container;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\n/**\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на /login\r\n */\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);","import React, {Component, Suspense, lazy} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Switch } from 'react-router-dom';\r\nimport AppBar from './components/AppBar';\r\nimport Container from './components/Container';\r\nimport PrivateRoute from './components/PrivateRoute';\r\nimport PublicRoute from './components/PublicRoute';\r\nimport { authOperations } from './redux/auth';\r\n\r\n\r\nconst HomeView = lazy(() => import('./views/HomeView'));\r\nconst RegisterView = lazy(() => import('./views/RegisterView'));\r\nconst LoginView = lazy(() => import('./views/LoginView'));\r\nconst ContactsView = lazy(() => import('./views/ContactsView'));\r\nconst NotFoundView = lazy(() => import('./views/NotFoundView'));\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onGetCurrentUser();\r\n    }\r\n    \r\n    render() { \r\n        return (\r\n            <Container >\r\n                <AppBar />\r\n                \r\n                <Suspense fallback={<p>Loading...</p>}>\r\n                    <Switch>\r\n                        <PublicRoute exact path=\"/\" component={HomeView} />\r\n                        <PublicRoute path=\"/register\" restricted component={RegisterView} redirectTo=\"/contacts\" />\r\n                        <PublicRoute path=\"/login\" restricted component={LoginView} redirectTo=\"/contacts\" />\r\n                        <PrivateRoute path=\"/contacts\" component={ContactsView} redirectTo=\"/login\" />\r\n                        <PublicRoute component={NotFoundView} />\r\n                    </Switch>\r\n                </Suspense>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    onGetCurrentUser: authOperations.getCurrentUser\r\n}\r\n \r\nexport default connect(null, mapDispatchToProps)(App);\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport reduxStore from './redux/store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  \r\n  <React.StrictMode>  \r\n    <Provider store={reduxStore.store}>\r\n      <PersistGate loading={null} persistor={reduxStore.persistor}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </PersistGate> \r\n    </Provider>  \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}