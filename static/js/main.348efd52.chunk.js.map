{"version":3,"sources":["redux/contacts/contacts-actions.js","styles/AppBar.module.css","styles/UserMenu.module.css","styles/ContactsView.module.css","redux/contacts/contacts-reducer.js","redux/store.js","components/routes.js","components/Navigation.js","components/UserMenu/UserMenu.js","components/AuthNav.js","components/AppBar.js","components/Container/Container.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","index.js","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","module","exports","items","createReducer","state","payload","map","contact","name","includes","alert","filter","id","loading","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","contacts","contactsReducer","reduxStore","persistor","persistStore","routes","HomeView","RegisterView","LoginView","ContactsView","Navigation","isLogedIn","useSelector","authSelectors","getIsAuthenticated","className","styles","link","activeClassName","activeLink","to","exact","UserMenu","email","getUsermail","dispatch","useDispatch","onLogOut","useCallback","authOperations","logOut","container","button","type","onClick","AuthNav","AppBar","header","Container","children","PrivateRoute","isAuthenticated","redirectTo","routeProps","isLoggedIn","PublicRoute","restricted","lazy","NotFoundView","App","useEffect","getCurrentUser","fallback","path","ReactDOM","render","StrictMode","document","getElementById","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","authActions","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","user","_","token","setError","axios","defaults","baseURL","headers","common","Authorization","register","credentials","a","post","response","data","message","logIn","getState","persistedToken","get"],"mappings":"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","file":"static/js/main.348efd52.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n\r\nexport const filterContacts = createAction('contacts/Filter');\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppBar_header__2d_Fw\",\"link\":\"AppBar_link__3qJgm\",\"activeLink\":\"AppBar_activeLink__2PboY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UserMenu_container__1cTyc\",\"email\":\"UserMenu_email__368ZS\",\"button\":\"UserMenu_button__2gP0X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsView_container__1N_Xj\",\"title\":\"ContactsView_title__25GcZ\",\"form\":\"ContactsView_form__SdtTo\",\"form__label\":\"ContactsView_form__label__29NZR\",\"form__input\":\"ContactsView_form__input__33A__\",\"button\":\"ContactsView_button__2JTZj\",\"buttonDelete\":\"ContactsView_buttonDelete__1PZYU\",\"contacts\":\"ContactsView_contacts__WGNkc\",\"contacts__item\":\"ContactsView_contacts__item__2576B\"};","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    filterContacts\r\n } from './contacts-actions'\r\n\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSuccess]: (state, { payload }) => payload,\r\n    \r\n    [addContactSuccess]: (state, { payload }) => state.map(contact => contact.name).includes(payload.name)\r\n    ? alert(`${payload.name} is already in contacts.`)\r\n    : [payload, ...state],\r\n  \r\n    \r\n    [deleteContactSuccess]: (state, { payload }) => state.filter(contact => contact.id !== payload),\r\n})\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [filterContacts]: (state, { payload }) => payload,\r\n})\r\n\r\nconst error = createReducer(null, {})\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n    error,\r\n})","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\nimport { authReducer } from './auth';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n}),\r\n\r\n    logger\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),       \r\n    contacts: contactsReducer,\r\n  },\r\n    \r\n  middleware,\r\n});\r\n\r\nconst persistor = persistStore(store)\r\n\r\nconst reduxStore = { store, persistor };\r\n\r\nexport default reduxStore","const routes =  {\r\n    HomeView: '/',\r\n    RegisterView: '/register',\r\n    LoginView: '/login',\r\n    ContactsView: '/contacts'\r\n}\r\n\r\nexport default routes","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport routes from './routes'\r\nimport { useSelector } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\nimport styles from '../styles/AppBar.module.css';\r\n\r\n\r\nconst Navigation = () => {\r\n  const isLogedIn = useSelector(authSelectors.getIsAuthenticated)\r\n  \r\n  return (\r\n    <nav>\r\n      <NavLink \r\n        className={styles.link} \r\n        activeClassName={styles.activeLink} \r\n        to={routes.HomeView}\r\n        exact>\r\n        Home\r\n      </NavLink>\r\n\r\n      {isLogedIn && (\r\n        <NavLink\r\n          className={styles.link} \r\n          activeClassName={styles.activeLink} \r\n          to={routes.ContactsView}\r\n          exact       \r\n        >\r\n          Contacts\r\n        </NavLink>\r\n      )}\r\n    </nav>\r\n  );\r\n}\r\n \r\nexport default Navigation;\r\n\r\n\r\n\r\n// const Navigation = ({ isLogedIn }) => (\r\n\r\n// );\r\n\r\n// const mapStateToProps = state => ({\r\n//   isLogedIn: authSelectors.getIsAuthenticated(state),\r\n// });\r\n\r\n// export default connect(mapStateToProps)(Navigation);","import React, {useCallback} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { authSelectors, authOperations } from '../../redux/auth';\r\nimport styles from '../../styles/UserMenu.module.css'\r\n\r\n\r\nconst UserMenu = () => {\r\n    const email = useSelector(authSelectors.getUsermail)\r\n\r\n    const dispatch = useDispatch();\r\n    const onLogOut = useCallback(() => dispatch(authOperations.logOut()), [dispatch]);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <p className={styles.email}>{email}</p>\r\n            <button className={styles.button} type=\"button\" onClick={onLogOut}>\r\n                Logout\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default UserMenu;\r\n\r\n\r\n// const UserMenu = ({ email, onLogout }) => (\r\n//     <div className={styles.container}>\r\n//         <p className={styles.email}>{email}</p>\r\n//         <button className={styles.button} type=\"button\" onClick={onLogout}>\r\n//             Logout\r\n//         </button>\r\n//     </div>\r\n\r\n// );\r\n\r\n// const mapStateToProps = (state) => ({\r\n//     email: authSelectors.getUsermail(state)\r\n// });\r\n\r\n// const mapDispatchToProps = {\r\n//     onLogout: authOperations.logOut,\r\n// };\r\n \r\n// export default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n\r\n//zxc zxc@ukr.net\r\n//Andrii Mishenko andriiasd123@gmail.com Fylhtq2021\r\n//Anna Mishchenko anechka@gmail.com Fyz1990","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport routes from './routes';\r\nimport styles from '../styles/AppBar.module.css';\r\n\r\nconst AuthNav = () => (\r\n  <div>\r\n    <NavLink\r\n      className={styles.link} \r\n      activeClassName={styles.activeLink} \r\n      to={routes.RegisterView}\r\n      exact\r\n\r\n    >\r\n      Registration\r\n    </NavLink>\r\n    <NavLink\r\n      className={styles.link} \r\n      activeClassName={styles.activeLink} \r\n      to={routes.LoginView}\r\n      exact \r\n    >\r\n      Login\r\n    </NavLink>\r\n  </div>\r\n);\r\n\r\nexport default AuthNav;","import React from 'react';\r\n\r\nimport Navigation from './Navigation';\r\nimport styles from '../styles/AppBar.module.css';\r\nimport UserMenu from './UserMenu';\r\nimport AuthNav from './AuthNav';\r\nimport { useSelector } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\nconst AppBar = () => {\r\n    const isLogedIn = useSelector(authSelectors.getIsAuthenticated)\r\n    return (\r\n        <header className={styles.header}>\r\n            <Navigation />\r\n            {isLogedIn ? <UserMenu /> : <AuthNav />}\r\n        </header>\r\n    );\r\n}\r\n \r\nexport default AppBar;\r\n\r\n\r\n// const AppBar = ({isAuthenticated}) => (\r\n//     <header className={styles.header}>\r\n//         <Navigation />\r\n//         {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n//     </header>\r\n// );\r\n\r\n// const mapStateToProps = (state) => ({\r\n//     isAuthenticated: authSelectors.getIsAuthenticated(state)\r\n// })\r\n \r\n// export default connect(mapStateToProps)(AppBar);","import React from 'react';\r\nimport styles from '../../styles/ContactsView.module.css';\r\n\r\nconst Container = ({ children }) => <div className={styles.container}>{children}</div>;\r\n\r\nexport default Container;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\n/**\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на /login\r\n */\r\nconst PrivateRoute = ({ \r\n  isAuthenticated,\r\n  redirectTo,\r\n  children,\r\n  ...routeProps\r\n}) => {\r\n  const isLoggedIn = useSelector(authSelectors.getIsAuthenticated)\r\n  return (\r\n    <Route {...routeProps}>\r\n      {isLoggedIn ? children : <Redirect to={redirectTo} />}\r\n    </Route>\r\n  )\r\n}\r\n\r\nexport default PrivateRoute;\r\n\r\n// const PrivateRoute = ({\r\n//   component: Component,\r\n//   isAuthenticated,\r\n//   redirectTo,\r\n//   ...routeProps\r\n// }) => (\r\n//   <Route\r\n//     {...routeProps}\r\n//     render={props =>\r\n//       isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n//     }\r\n//   />\r\n// );\r\n\r\n// const mapStateToProps = state => ({\r\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n// });\r\n\r\n// export default connect(mapStateToProps)(PrivateRoute);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\nconst PublicRoute = ({\r\n  isAuthenticated,\r\n  redirectTo,\r\n  children,\r\n  ...routeProps\r\n}) => {\r\n  const isLoggedIn = useSelector(authSelectors.getIsAuthenticated)\r\n  return (\r\n    <Route {...routeProps}>\r\n      {isLoggedIn && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        children\r\n      )}\r\n    </Route>\r\n  )\r\n};\r\n\r\nexport default PublicRoute;\r\n\r\n\r\n\r\n// const PublicRoute = ({\r\n//   component: Component,\r\n//   isAuthenticated,\r\n//   redirectTo,\r\n//   ...routeProps\r\n// }) => (\r\n//   <Route\r\n//     {...routeProps}\r\n//     render={props =>\r\n//       isAuthenticated && routeProps.restricted ? (\r\n//         <Redirect to={redirectTo} />\r\n//       ) : (\r\n//         <Component {...props} />\r\n//       )\r\n//     }\r\n//   />\r\n// );\r\n\r\n// const mapStateToProps = state => ({\r\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n// });\r\n\r\n// export default connect(mapStateToProps)(PublicRoute);","import React, {Suspense, lazy, useEffect} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {Switch } from 'react-router-dom';\r\nimport AppBar from './components/AppBar';\r\nimport Container from './components/Container';\r\nimport PrivateRoute from './components/PrivateRoute';\r\nimport PublicRoute from './components/PublicRoute';\r\nimport { authOperations } from './redux/auth';\r\n\r\n\r\nconst HomeView = lazy(() => import('./views/HomeView'));\r\nconst RegisterView = lazy(() => import('./views/RegisterView'));\r\nconst LoginView = lazy(() => import('./views/LoginView'));\r\nconst ContactsView = lazy(() => import('./views/ContactsView'));\r\nconst NotFoundView = lazy(() => import('./views/NotFoundView'));\r\n\r\nconst App = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    //  заміна componentDidMount()\r\n    useEffect(() => {\r\n        dispatch(authOperations.getCurrentUser());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <Container >\r\n            <AppBar />\r\n            \r\n            <Suspense fallback={<p>Loading...</p>}>\r\n                <Switch>\r\n                    <PublicRoute exact path=\"/\">\r\n                        <HomeView/>\r\n                    </PublicRoute>\r\n                    <PublicRoute path=\"/register\" restricted redirectTo=\"/contacts\" >\r\n                        <RegisterView/>\r\n                    </PublicRoute>\r\n                    <PublicRoute path=\"/login\" restricted redirectTo=\"/contacts\" >\r\n                        <LoginView/>\r\n                    </PublicRoute>\r\n                    <PrivateRoute path=\"/contacts\" redirectTo=\"/login\" >\r\n                        <ContactsView/>\r\n                    </PrivateRoute>\r\n                    <PublicRoute >\r\n                        <NotFoundView/>\r\n                    </PublicRoute>\r\n                </Switch>\r\n            </Suspense>\r\n        </Container>\r\n    );\r\n}\r\n \r\nexport default App;\r\n\r\n// class App extends Component {\r\n//     componentDidMount() {\r\n//         this.props.onGetCurrentUser();\r\n//     }\r\n    \r\n//     render() { \r\n//         return (\r\n//             <Container >\r\n//                 <AppBar />\r\n                \r\n//                 <Suspense fallback={<p>Loading...</p>}>\r\n//                     <Switch>\r\n//                         <PublicRoute exact path=\"/\" component={HomeView} />\r\n//                         <PublicRoute path=\"/register\" restricted component={RegisterView} redirectTo=\"/contacts\" />\r\n//                         <PublicRoute path=\"/login\" restricted component={LoginView} redirectTo=\"/contacts\" />\r\n//                         <PrivateRoute path=\"/contacts\" component={ContactsView} redirectTo=\"/login\" />\r\n//                         <PublicRoute component={NotFoundView} />\r\n//                     </Switch>\r\n//                 </Suspense>\r\n//             </Container>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//     onGetCurrentUser: authOperations.getCurrentUser\r\n// }\r\n \r\n// export default connect(null, mapDispatchToProps)(App);\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport reduxStore from './redux/store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  \r\n  <React.StrictMode>  \r\n    <Provider store={reduxStore.store}>\r\n      <PersistGate loading={null} persistor={reduxStore.persistor}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </PersistGate> \r\n    </Provider>  \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\n const authActions = {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n\r\nexport default authActions","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, {payload}) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_,  {payload} ) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError,\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\n/*\r\n * POST @ /users/signup\r\n * body { name, email, password }\r\n *\r\n * После успешной регистрации добавляем токен в HTTP-заголовок\r\n */\r\nconst register = credentials => async dispatch => {\r\n  dispatch(authActions.registerRequest())\r\n  \r\n  try {\r\n\r\n    const response = await axios.post('/users/signup', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.registerSuccess(response.data))\r\n  } catch (error) {\r\n\r\n    dispatch(authActions.registerError(error.message));\r\n  }\r\n}\r\n/*\r\n * POST @ /users/login\r\n * body:\r\n *    { email, password }\r\n *\r\n * После успешного логина добавляем токен в HTTP-заголовок\r\n */\r\nconst logIn = credentials => async dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n  \r\n  try {\r\n\r\n    const response = await axios.post('/users/login', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\n/*\r\n * POST @ /users/logout\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. После успешного логаута, удаляем токен из HTTP-заголовка\r\n */\r\nconst logOut = () => async dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n  \r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\n/*\r\n * GET @ /users/current\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. Забираем токен из стейта через getState()\r\n * 2. Если токена нет, выходим не выполняя никаких операций\r\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\r\n */\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\nconst authOperations = { register, logOut, logIn, getCurrentUser };\r\n\r\nexport default authOperations;","const getIsAuthenticated = state => state.auth.isAuthenticated\r\n\r\nconst getUsermail = state => state.auth.user.email;\r\n\r\n const authSelectors = {\r\n  getIsAuthenticated,\r\n  getUsermail,\r\n};\r\n\r\nexport default authSelectors;"],"sourceRoot":""}