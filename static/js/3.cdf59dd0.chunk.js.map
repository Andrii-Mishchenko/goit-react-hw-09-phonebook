{"version":3,"sources":["redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js"],"names":["contactsOperations","addContact","name","number","dispatch","a","contact","addContactRequest","axios","post","data","addContactSuccess","addContactError","message","deleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","fetchContacts","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","ContactForm","state","nameInputId","shortid","generate","numberInputId","handleInput","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","className","styles","form","this","form__label","htmlFor","form__input","type","pattern","title","required","onChange","id","button","Component","connect","getLoading","contacts","loading","getFilter","filter","getVisibleContacts","createSelector","items","normalizedFilter","toLowerCase","includes","onDeleteContact","map","contacts__item","buttonDelete","onClick","filterContacts","target","ContactsView","container","formSubmitHandler","isLoadingContacts","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","setCharacters","_alphabet_","length","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","RegExp","replace","test"],"mappings":"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","file":"static/js/3.cdf59dd0.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n} from './contacts-actions';\r\n\r\nconst fetchContacts = () =>  async dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n        dispatch(fetchContactsSuccess(data));\r\n    } catch (error) {\r\n        dispatch(fetchContactsError(error.message));\r\n    }\r\n\r\n    // axios\r\n    //     .get('/contacts')\r\n    //     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    //     .catch(error => dispatch(fetchContactsError(error)));\r\n}\r\n\r\nconst addContact = ({ name, number }) => async dispatch => {\r\n    const contact = { name, number };\r\n    \r\n    dispatch(addContactRequest);\r\n\r\n    try {\r\n        const { data } = await axios.post('/contacts', contact);\r\n        dispatch(addContactSuccess(data));\r\n    } catch (error) {\r\n        dispatch(addContactError(error.message));\r\n    }\r\n}\r\n\r\nconst deleteContact = contactId => async dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    try {\r\n        await axios.delete(`/contacts/${contactId}`);\r\n        dispatch(deleteContactSuccess(contactId));\r\n    } catch (error) {\r\n        dispatch(deleteContactError(error.message));\r\n    }\r\n}\r\n\r\nconst contactsOperations = { addContact, deleteContact, fetchContacts };\r\n \r\nexport default contactsOperations;","import React, {Component} from 'react';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types'\r\nimport styles from'../../styles/ContactsView.module.css'\r\nimport { connect } from 'react-redux';\r\nimport {contactsOperations} from '../../redux/contacts';\r\n\r\n\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n        onSubmit: PropTypes.func.isRequired,\r\n    }\r\n\r\n    state = { \r\n        name: '',\r\n        number: ''\r\n    }\r\n\r\n    nameInputId = shortid.generate();\r\n    numberInputId = shortid.generate();\r\n\r\n    handleInput = e =>{\r\n        const {name, value} = e.currentTarget\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    }\r\n\r\n    handleSubmit = e =>{\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state)\r\n\r\n        this.reset();\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState({\r\n            name: '',\r\n            number: ''\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <form className={styles.form} onSubmit={this.handleSubmit} >\r\n                <label className={styles.form__label} htmlFor={this.nameInputId}>\r\n                    Name\r\n                    <input\r\n                        className={styles.form__input}\r\n                        type=\"text\"\r\n                        value={this.state.name}\r\n                        name=\"name\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                        onChange={this.handleInput}\r\n                        id={this.nameInputId}\r\n                    />\r\n                </label>\r\n            \r\n                <label className={styles.form__label} htmlFor={this.numberInputId}>\r\n                    Number\r\n                    <input\r\n                        className={styles.form__input}\r\n                        type=\"tel\"\r\n                        value={this.state.number}\r\n                        name=\"number\"\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                        onChange={this.handleInput}\r\n                        id={this.numberInputId}\r\n                    />\r\n                </label>\r\n                <button className={styles.button} type=\"submit\">Add contact</button>\r\n            </form>\r\n         );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: ({ name, number }) => dispatch(contactsOperations.addContact({ name, number })),\r\n})\r\n \r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n\r\n\r\nexport const getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter= filter.toLowerCase();\r\n\r\n        return contacts.filter(contact=>\r\n            contact.name.toLowerCase().includes(normalizedFilter),\r\n        );\r\n    },\r\n);\r\n\r\n// export const getVisibleContacts = state => {\r\n//     const contacts = getAllContacts(state)\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter= filter.toLowerCase();\r\n\r\n//     return contacts.filter(contact=>\r\n//     contact.name.toLowerCase().includes(normalizedFilter));\r\n// };","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport styles from'../../styles/ContactsView.module.css'\r\nimport { connect } from 'react-redux';\r\nimport {contactsOperations} from '../../redux/contacts';\r\nimport {getVisibleContacts} from '../../redux/contacts/contacts-selectors';\r\n\r\nconst ContactList = ({contacts, onDeleteContact}) => (\r\n    <ul className={styles.form}>\r\n        {contacts.map(({id, name, number}) => (\r\n            <li className={styles.contacts__item} key={id}>\r\n                <p>{name}: {number}</p>\r\n                <button \r\n                    className={styles.buttonDelete} \r\n                    type=\"button\" \r\n                    onClick={() => onDeleteContact(id)}\r\n                >Delete</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n) \r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,    \r\n    onDeleteContact: PropTypes.func.isRequired,    \r\n}\r\n\r\n\r\nconst mapStateToProps = state =>({\r\n    contacts: getVisibleContacts(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteContact: (id) => dispatch(contactsOperations.deleteContact(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from'../../styles/ContactsView.module.css'\r\nimport { connect } from 'react-redux';\r\nimport { filterContacts } from '../../redux/contacts';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\n\r\n\r\nconst Filter = ({value, onChange}) => (\r\n    <div className={styles.form}>\r\n        <label className={styles.form__label}>\r\n            Find contacts by name\r\n            <input \r\n                className={styles.form__input} \r\n                type=\"text\" value={value} \r\n                onChange={onChange}\r\n            />\r\n        </label>\r\n    </div>\r\n)\r\n \r\nFilter.propTypes = {\r\n    // value: PropTypes.string.isRequired,    \r\n    onChange: PropTypes.func.isRequired,    \r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    value: getFilter(state),\r\n    \r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(filterContacts(e.target.value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from '../components/ContactForm'\r\nimport ContactList from '../components/ContactList'\r\nimport Filter from '../components/Filter'\r\nimport styles from '../styles/ContactsView.module.css'\r\nimport {contactsOperations} from '../redux/contacts';\r\nimport { getLoading } from '../redux/contacts/contacts-selectors';\r\n\r\n\r\nclass ContactsView extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.fetchContacts();\r\n    }\r\n  \r\n    render() { \r\n\r\n        return (  \r\n            <div className={styles.container}>\r\n                <h1 className={styles.title}>Phonebook</h1>\r\n                <ContactForm onSubmit={this.formSubmitHandler}/>\r\n                <h2 className={styles.title}>Contacts</h2>\r\n                <Filter />\r\n                {this.props.isLoadingContacts && <h1 className={styles.title}>Loading</h1>}\r\n                <ContactList/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoadingContacts: getLoading(state)\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n"],"sourceRoot":""}