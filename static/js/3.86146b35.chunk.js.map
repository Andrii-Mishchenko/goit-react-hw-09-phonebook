{"version":3,"sources":["redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js"],"names":["contactsOperations","addContact","name","number","dispatch","a","contact","addContactRequest","axios","post","data","addContactSuccess","addContactError","message","deleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","fetchContacts","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","ContactForm","useState","setName","setNumber","nameInputId","shortid","generate","numberInputId","useDispatch","handleInputName","useCallback","e","currentTarget","value","handleInputNumber","handleSubmit","preventDefault","id","reset","className","styles","form","onSubmit","form__label","htmlFor","form__input","type","pattern","title","required","onChange","button","getLoading","state","contacts","loading","getFilter","filter","getVisibleContacts","createSelector","items","normalizedFilter","toLowerCase","includes","ContactList","useSelector","onDeleteContact","map","contacts__item","buttonDelete","onClick","Filter","filterContacts","target","ContactsView","isLoadingContacts","useEffect","container","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","setCharacters","_alphabet_","Error","unique","split","item","ind","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","splice","shuffle","module","exports","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","mask","log","LN2","step","RegExp","replace","test"],"mappings":"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","file":"static/js/3.86146b35.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n} from './contacts-actions';\r\n\r\nconst fetchContacts = () =>  async dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n        dispatch(fetchContactsSuccess(data));\r\n    } catch (error) {\r\n        dispatch(fetchContactsError(error.message));\r\n    }\r\n\r\n    // axios\r\n    //     .get('/contacts')\r\n    //     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    //     .catch(error => dispatch(fetchContactsError(error)));\r\n}\r\n\r\nconst addContact = ({ name, number }) => async dispatch => {\r\n    const contact = { name, number };\r\n    \r\n    dispatch(addContactRequest);\r\n\r\n    try {\r\n        const { data } = await axios.post('/contacts', contact);\r\n        dispatch(addContactSuccess(data));\r\n    } catch (error) {\r\n        dispatch(addContactError(error.message));\r\n    }\r\n}\r\n\r\nconst deleteContact = contactId => async dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    try {\r\n        await axios.delete(`/contacts/${contactId}`);\r\n        dispatch(deleteContactSuccess(contactId));\r\n    } catch (error) {\r\n        dispatch(deleteContactError(error.message));\r\n    }\r\n}\r\n\r\nconst contactsOperations = { addContact, deleteContact, fetchContacts };\r\n \r\nexport default contactsOperations;","import React, {useState, useCallback} from 'react';\r\nimport shortid from 'shortid';\r\nimport styles from'../../styles/ContactsView.module.css'\r\nimport { useDispatch } from 'react-redux';\r\nimport { contactsOperations } from '../../redux/contacts';\r\n\r\n\r\n\r\nconst ContactForm = () => {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const nameInputId = shortid.generate();\r\n    const numberInputId = shortid.generate();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleInputName = useCallback((e) => {\r\n        setName(e.currentTarget.value);\r\n    }, []);\r\n\r\n    const handleInputNumber = useCallback((e) => {\r\n        setNumber(e.currentTarget.value);\r\n    }, []);\r\n\r\n    const handleSubmit = useCallback((e) => {\r\n        e.preventDefault();\r\n        dispatch(\r\n            contactsOperations.addContact({ id: shortid.generate(), name, number })\r\n        );\r\n        reset();\r\n    }, [dispatch, name, number]);\r\n    \r\n    const reset = () => {\r\n        setName('');\r\n        setNumber('');\r\n    };\r\n\r\n    return (\r\n        <form className={styles.form} onSubmit={handleSubmit} >\r\n            <label className={styles.form__label} htmlFor={nameInputId}>\r\n                Name\r\n                <input\r\n                    className={styles.form__input}\r\n                    type=\"text\"\r\n                    value={name}\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    onChange={handleInputName}\r\n                    id={nameInputId}\r\n                />\r\n            </label>\r\n\r\n            <label className={styles.form__label} htmlFor={numberInputId}>\r\n                Number\r\n                <input\r\n                    className={styles.form__input}\r\n                    type=\"tel\"\r\n                    value={number}\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    onChange={handleInputNumber}\r\n                    id={numberInputId}\r\n                />\r\n            </label>\r\n            <button className={styles.button} type=\"submit\">Add contact</button>\r\n        </form>\r\n     );\r\n}\r\n\r\nexport default ContactForm;\r\n\r\n\r\n// class ContactForm extends Component {\r\n//     static propTypes = {\r\n//         onSubmit: PropTypes.func.isRequired,\r\n//     }\r\n\r\n//     state = { \r\n//         name: '',\r\n//         number: ''\r\n//     }\r\n\r\n//     nameInputId = shortid.generate();\r\n//     numberInputId = shortid.generate();\r\n\r\n//     handleInput = e =>{\r\n//         const {name, value} = e.currentTarget\r\n//         this.setState({\r\n//             [name]: value,\r\n//         });\r\n//     }\r\n\r\n//     handleSubmit = e =>{\r\n//         e.preventDefault();\r\n//         this.props.onSubmit(this.state)\r\n\r\n//         this.reset();\r\n//     }\r\n\r\n//     reset = () => {\r\n//         this.setState({\r\n//             name: '',\r\n//             number: ''\r\n//         })\r\n//     }\r\n\r\n//     render() { \r\n//         return ( \r\n//             <form className={styles.form} onSubmit={this.handleSubmit} >\r\n//                 <label className={styles.form__label} htmlFor={this.nameInputId}>\r\n//                     Name\r\n//                     <input\r\n//                         className={styles.form__input}\r\n//                         type=\"text\"\r\n//                         value={this.state.name}\r\n//                         name=\"name\"\r\n//                         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                         title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//                         required\r\n//                         onChange={this.handleInput}\r\n//                         id={this.nameInputId}\r\n//                     />\r\n//                 </label>\r\n            \r\n//                 <label className={styles.form__label} htmlFor={this.numberInputId}>\r\n//                     Number\r\n//                     <input\r\n//                         className={styles.form__input}\r\n//                         type=\"tel\"\r\n//                         value={this.state.number}\r\n//                         name=\"number\"\r\n//                         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                         title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                         required\r\n//                         onChange={this.handleInput}\r\n//                         id={this.numberInputId}\r\n//                     />\r\n//                 </label>\r\n//                 <button className={styles.button} type=\"submit\">Add contact</button>\r\n//             </form>\r\n//          );\r\n//     }\r\n// }\r\n\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     onSubmit: ({ name, number }) => dispatch(contactsOperations.addContact({ name, number })),\r\n// })\r\n \r\n// export default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n\r\n\r\nexport const getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter= filter.toLowerCase();\r\n\r\n        return contacts.filter(contact=>\r\n            contact.name.toLowerCase().includes(normalizedFilter),\r\n        );\r\n    },\r\n);\r\n\r\n// export const getVisibleContacts = state => {\r\n//     const contacts = getAllContacts(state)\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter= filter.toLowerCase();\r\n\r\n//     return contacts.filter(contact=>\r\n//     contact.name.toLowerCase().includes(normalizedFilter));\r\n// };","import React, {useCallback} from 'react';\r\nimport styles from'../../styles/ContactsView.module.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {contactsOperations} from '../../redux/contacts';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\n\r\nconst ContactList = () => {\r\n    const dispatch = useDispatch();\r\n    const contacts = useSelector(getVisibleContacts);\r\n    const onDeleteContact = useCallback((id) => {\r\n        dispatch(contactsOperations.deleteContact(id));\r\n        }, [dispatch]\r\n    );\r\n\r\n    return (\r\n        <ul className={styles.form}>\r\n            {contacts.map(({id, name, number}) => (\r\n                <li className={styles.contacts__item} key={id}>\r\n                    <p>{name}: {number}</p>\r\n                    <button \r\n                        className={styles.buttonDelete} \r\n                        type=\"button\" \r\n                        onClick={() => onDeleteContact(id)}\r\n                    >Delete</button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n     );\r\n}\r\n\r\n \r\nexport default ContactList;\r\n\r\n// const ContactList = ({contacts, onDeleteContact}) => (\r\n//     <ul className={styles.form}>\r\n//         {contacts.map(({id, name, number}) => (\r\n//             <li className={styles.contacts__item} key={id}>\r\n//                 <p>{name}: {number}</p>\r\n//                 <button \r\n//                     className={styles.buttonDelete} \r\n//                     type=\"button\" \r\n//                     onClick={() => onDeleteContact(id)}\r\n//                 >Delete</button>\r\n//             </li>\r\n//         ))}\r\n//     </ul>\r\n// ) \r\n\r\n// ContactList.propTypes = {\r\n//     contacts: PropTypes.array.isRequired,    \r\n//     onDeleteContact: PropTypes.func.isRequired,    \r\n// }\r\n\r\n\r\n// const mapStateToProps = state =>({\r\n//     contacts: getVisibleContacts(state),\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     onDeleteContact: (id) => dispatch(contactsOperations.deleteContact(id))\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n","import React from 'react';\r\nimport styles from'../../styles/ContactsView.module.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { filterContacts } from '../../redux/contacts';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\n\r\n\r\nconst Filter = () => {\r\n    const value = useSelector(getFilter)\r\n    const dispatch = useDispatch();\r\n    const onChange = e => dispatch(filterContacts(e.target.value))\r\n\r\n    return (\r\n        <div className={styles.form}>\r\n            <label className={styles.form__label}>\r\n                Find contacts by name\r\n                <input \r\n                    className={styles.form__input}\r\n                    type=\"text\" value={value}\r\n                    onChange={onChange}\r\n                />\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Filter;\r\n\r\n\r\n// const Filter = ({value, onChange}) => (\r\n//     <div className={styles.form}>\r\n//         <label className={styles.form__label}>\r\n//             Find contacts by name\r\n//             <input \r\n//                 className={styles.form__input} \r\n//                 type=\"text\" value={value} \r\n//                 onChange={onChange}\r\n//             />\r\n//         </label>\r\n//     </div>\r\n// )\r\n \r\n\r\n\r\n// const mapStateToProps = (state) => ({\r\n//     value: getFilter(state),\r\n    \r\n// })\r\n\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     onChange: (e) => dispatch(filterContacts(e.target.value))\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector,  } from 'react-redux';\r\nimport ContactForm from '../components/ContactForm'\r\nimport ContactList from '../components/ContactList'\r\nimport Filter from '../components/Filter'\r\nimport styles from '../styles/ContactsView.module.css'\r\nimport {contactsOperations} from '../redux/contacts';\r\nimport { getLoading } from '../redux/contacts/contacts-selectors';\r\n\r\n\r\nconst ContactsView = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isLoadingContacts = useSelector(getLoading)\r\n\r\n    // вместо componentDidMount()\r\n    useEffect(() => {\r\n        dispatch(contactsOperations.fetchContacts());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <h1 className={styles.title}>Phonebook</h1>\r\n            <ContactForm />\r\n            <h2 className={styles.title}>Contacts</h2>\r\n            <Filter />\r\n            {isLoadingContacts && <h1 className={styles.title}>Loading</h1>}\r\n            <ContactList/>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default ContactsView;\r\n\r\n\r\n// class ContactsView extends Component {\r\n\r\n//     componentDidMount(){\r\n//         this.props.fetchContacts();\r\n//     }\r\n  \r\n//     render() { \r\n\r\n//         return (  \r\n//             <div className={styles.container}>\r\n//                 <h1 className={styles.title}>Phonebook</h1>\r\n//                 <ContactForm />\r\n//                 <h2 className={styles.title}>Contacts</h2>\r\n//                 <Filter />\r\n//                 {this.props.isLoadingContacts && <h1 className={styles.title}>Loading</h1>}\r\n//                 <ContactList/>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n// // onSubmit={this.formSubmitHandler}\r\n\r\n// const mapStateToProps = state => ({\r\n//     isLoadingContacts: getLoading(state)\r\n// })\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n// });\r\n \r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsView);","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n"],"sourceRoot":""}